@page "/notebook/notes/list"
@inject INoteService NoteService
@inject ISyncLocalStorageService LocalStorage
@implements IDisposable

<div class="h-690">
    <h3>Список задач:</h3>
    @if (AllNotes().Count <= 0)
    {
        <p>Задач нет</p>
    }
    else
    {
        <div>
            <table class="table table-striped table-dark">
                <thead>
                    <tr>
                        <th>№</th>
                        <th>Статус</th>
                        <th>Заголовок</th>
                        <th>Описание</th>
                        <th>Создано</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var noteitem in AllNotes())
                    {
                        <tr>
                            <td>@noteitem.Id</td>
                            <td>
                                <input class="form-check-input" type="checkbox" @onchange="(() =>NoteStatusChange(noteitem.Id, !noteitem.Status))" checked=@noteitem.Status>
                            </td>
                            <td>@noteitem.Title</td>
                            <td>@noteitem.Description</td>
                            <td>@noteitem.DateCreate.ToString()</td>
                            <td>
                                <button class="btn-success" @onclick="(()=>EditNote(noteitem))">Редактировать</button>
                                <button class="btn-warning" @onclick="(()=>DeleteNote(noteitem))">Удалить</button>
                            </td>
                        </tr>

                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private List<Note> AllNotes()
    {
        var result = LocalStorage.GetItem<List<Note>>("notes");
        if (result == null)
        {
            result = new List<Note>();
        }
        return result;
    }
    [Parameter]
    public EventCallback<Note> OnNoteEdit { get; set; }

    protected override async Task OnInitializedAsync()
    {
        NoteService.OnChange += StateHasChanged;
    }
    private async Task EditNote(Note note)
    {
        await OnNoteEdit.InvokeAsync(note);
    }
    private async Task DeleteNote(Note note)
    {
        await NoteService.DeleteNote(note);
    }
    private async Task NoteStatusChange(int id, bool status)
    {
        await NoteService.NoteStatusChange(id, status);
    }
    public void Dispose()
    {
        NoteService.OnChange -= StateHasChanged;
    }
}
